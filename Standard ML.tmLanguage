<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>sml</string>
		<string>sig</string>
		<string>ML</string>
	</array>
	<key>foldingStartMarker</key>
	<string>\(\*|\b(struct|sig)\b</string>
	<key>foldingStopMarker</key>
	<string>\*\)|\bend\b</string>
	<key>keyEquivalent</key>
	<string>^~S</string>
	<key>name</key>
	<string>Standard ML</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(as|let|in|abstype|local|where|case|of|fn|raise|handle|ref|infix|infixr|before|end|withtype|with|val|include)\b</string>
			<key>name</key>
			<string>keyword.other.ml</string>
		</dict>
		
		<dict>
			<key>match</key>
			<string>\b(struct|sig|sharing|type|datatype|eqtype)\b</string>
			<key>name</key>
			<string>keyword.other.ml</string>
		</dict>
		
		<dict>
			<key>match</key>
			<string>\b(if|then|else)\b</string>
			<key>name</key>
			<string>keyword.control.ml</string>
		</dict>
		
		<dict>
			<key>match</key>
			<string>\b(andalso|orelse|not)\b</string>
			<key>name</key>
			<string>keyword.operator.logical.ml</string>
		</dict>
		
		<dict>
			<key>match</key>
			<string>\b(open)\b</string>
			<key>name</key>
			<string>keyword.other.module.ml</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(nil|true|false|NONE|SOME)\b</string>
			<key>name</key>
			<string>constant.language.ml</string>
		</dict>
		
		<dict>
			<key>match</key>
			<string>\b(fun|structure|signature|exception|functor)\s+([\w]+)\b</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<!-- <string>keyword.control.fun.ml</string> -->
					<string>storage.type.ml</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ml</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.definition.fun.ml</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>source.ml</string>
				</dict>
			</array>
		</dict>
		
		<dict>
			<key>match</key>
			<string>\b(abs|app|ARRAY|Array|array|ARRAY2|Array2|ARRAY_SLICE|ArraySlice|before|BIN_IO|Bind|BinIO|BinPrimIO|BIT_FLAGS|bool|BOOL|Bool|BoolArray|BoolArray2|BoolVector|BYTE|Byte|ceil|Char|char|CHAR|CharArray|CharArray2|CharArraySlice|CharVector|CharVectorSlice|Chr|chr|CInterface|CInterfaceSig|COMMAND_LINE|CommandLine|concat|DATE|Date|Div|div|Domain|Empty|EQUAL|exn|exnMessage|exnName|explode|Fail|false|floor|foldl|foldr|GENERAL|General|GENERIC_SOCK|GenericSock|getOpt|GREATER|HashArray|hd|IEEE_REAL|IEEEReal|ignore|IMPERATIVE_IO|implode|INET_SOCK|INetSock|int|Int|Int32|INT_INF|IntArray|IntArray2|IntArraySlice|INTEGER|IntInf|IntVector|IntVectorSlice|IO|isSome|LargeInt|LargeReal|LargeWord|length|LESS|LIST|list|List|LIST_PAIR|ListPair|map|Match|MATH|Math|mod|MONO_ARRAY|MONO_ARRAY2|MONO_ARRAY_SLICE|MONO_VECTOR|MONO_VECTOR_SLICE|NET_HOST_DB|NET_PROT_DB|NET_SERV_DB|NetHostDB|NetProtDB|NetServDB|nil|NONE|not|null|o|option|OPTION|Option|ord|order|OS|OS_FILE_SYS|OS_IO|OS_PATH|OS_PROCESS|Overflow|PACK_REAL|PACK_WORD|PackRealBig|PackRealLittle|PackWord16Big|PackWord16Little|PackWord32Big|PackWord32Little|PackWord8Big|PackWord8Little|PolyML|Position|POSIX|Posix|POSIX_ERROR|POSIX_FILE_SYS|POSIX_IO|POSIX_PROC_ENV|POSIX_PROCESS|POSIX_SIGNAL|POSIX_SYS_DB|POSIX_TTY|PRIM_IO|print|Process|real|REAL|Real|RealArray|RealArray2|RealArraySlice|RealVector|RealVectorSlice|ref|rev|round|RunCall|RuntimeCalls|Signal|SIGNAL|SingleAssignment|Size|size|SML90|Socket|SOCKET|SOME|Span|str|STREAM_IO|STRING|String|string|STRING_CVT|StringCvt|Subscript|SUBSTRING|Substring|substring|SysWord|TEXT|Text|TEXT_IO|TEXT_STREAM_IO|TextIO|TextPrimIO|THREAD|Thread|ThreadLib|TIME|Time|TIMER|Timer|tl|true|trunc|unit|Universal|UniversalArray|UNIX|Unix|UNIX_SOCK|UnixSock|use|valOf|Vector|vector|VECTOR|VECTOR_SLICE|VectorSlice|WEAK|Weak|WORD|Word|word|Word32|Word8|Word8Array|Word8Array2|Word8ArraySlice|Word8Vector|Word8VectorSlice)\b</string>
			<key>name</key>
			<string>support.constant.ml</string>
		</dict>
		
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ml</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ml</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.ml</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.ml</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.constant.ml</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.constant.ml</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(#")(\\)?.(")</string>
			<key>name</key>
			<string>constant.character.ml</string>
		</dict>
		
		<dict>
			<key>match</key>
			<string>\b\d*\.?\d+\b</string>
			<key>name</key>
			<string>constant.numeric.ml</string>
		</dict>
		
		<!-- <dict>
			<key>begin</key>
			<string>(?x)\b
					(functor|structure|signature|funsig)\s+
					(\w+)\s* # identifier</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.module.binder.ml</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.module.ml</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?==|:|\()</string>
			<key>name</key>
			<string>meta.module.dec.ml</string>
		</dict> -->
		
		
		<!-- <dict>
			<key>begin</key>
			<string>\s*(type|eqtype) .* =</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.typeabbrev.ml</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.other.typename.ml</string>
				</dict>
			</dict>
			<key>end</key>
			<string>$</string>
			<key>name</key>
			<string>meta.typeabbrev.ml</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(([a-zA-Z0-9\.\* ]|(\-&gt;))*)</string>
					<key>name</key>
					<string>meta.typeexp.ml</string>
				</dict>
			</array>
		</dict> -->
	</array>
	<key>repository</key>
	<dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\(\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.ml</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*\)</string>
					<key>name</key>
					<string>comment.block.ml</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>spec</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.ml</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.abbrev.ml</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(exception|type)\s+([a-zA-Z][a-zA-Z0-9'_]*)</string>
					<key>name</key>
					<string>meta.spec.ml.type</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(datatype)\s+([a-zA-Z][a-zA-Z0-9'_]*)\s*(?==)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.ml</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.datatype.ml</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=val|type|eqtype|datatype|structure|include|exception)</string>
					<key>name</key>
					<string>meta.spec.ml.datatype</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.other.ml</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>entity.name.type.datatype.ml</string>
								</dict>
							</dict>
							<key>match</key>
							<string>\b(and)\s+([a-zA-Z][a-zA-Z0-9'_]*)\s*(?==)</string>
							<key>name</key>
							<string>meta.spec.ml.datatype</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.other.dcon.ml</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>keyword.other.ml</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(?x)
							=\s*([a-zA-Z][a-zA-Z0-9'_]*)(\s+of)?</string>
							<key>name</key>
							<string>meta.datatype.rule.main.ml</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.other.dcon.ml</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>keyword.other.ml</string>
								</dict>
							</dict>
							<key>match</key>
							<string>\|\s*([a-zA-Z][a-zA-Z0-9'_]*)(\s+of)?</string>
							<key>name</key>
							<string>meta.datatype.rule.other.ml</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.ml</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(val)\s*([^:]+)\s*:</string>
					<key>name</key>
					<string>meta.spec.ml.val</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(structure)\s*(\w+)\s*:</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.ml</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.module.ml</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=val|type|eqtype|datatype|structure|include)</string>
					<key>name</key>
					<string>meta.spec.ml.structure</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\b(sharing)\b</string>
							<key>name</key>
							<string>keyword.other.ml</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.ml</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(include)\b</string>
					<key>name</key>
					<string>meta.spec.ml.include</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.ml</string>
	<key>uuid</key>
	<string>E40F3E3D-3CAB-408E-B36C-DC77B15974A2</string>
</dict>
</plist>
